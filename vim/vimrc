" NeoBundle Setting
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
let g:neobundle#types#git#default_protocol = 'https'

" My Bundles here:
NeoBundle 'Shougo/vimproc.vim', {
\   'build': {
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make -f make_unix.mak',
\   },
\}
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'https://github.com/hinagishi/neosnippet-snippets.git'
NeoBundle 'https://github.com/hinagishi/wombat256.vim.git'
NeoBundle 'https://github.com/altercation/vim-colors-solarized.git'
NeoBundle 'https://github.com/Shougo/unite-ssh.git'
NeoBundle 'https://github.com/Shougo/unite-build.git'
NeoBundle 'https://github.com/ujihisa/neco-look.git'
NeoBundle 'https://github.com/mattn/emmet-vim'
NeoBundle 'https://github.com/tyru/eskk.vim.git'
NeoBundle 'https://github.com/majutsushi/tagbar.git'
NeoBundle 'https://github.com/Shougo/unite-outline.git'
NeoBundle 'haya14busa/incsearch.vim'
NeoBundle 'https://github.com/bronson/vim-trailing-whitespace.git'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'https://github.com/mattn/webapi-vim.git'
NeoBundle 'https://github.com/basyura/twibill.vim.git'
NeoBundle 'https://github.com/tyru/open-browser.vim.git'
NeoBundle 'https://github.com/basyura/TweetVim.git'
NeoBundle 'https://github.com/vim-scripts/gtags.vim.git'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'https://github.com/davidhalter/jedi-vim.git', {
            \   "autoload": { "filetypes" : ["python"]}
            \}
NeoBundle 'https://github.com/nvie/vim-flake8.git', {
            \   "autoload": { "filetypes" : ["python"]}
            \}
NeoBundle 'https://github.com/fatih/vim-go.git'
NeoBundle 'https://github.com/kana/vim-textobj-user.git'
NeoBundle 'https://github.com/kana/vim-operator-user.git'
NeoBundle 'https://github.com/emonkak/vim-operator-comment.git'
NeoBundle 'https://github.com/kana/vim-textobj-line.git'
NeoBundle 'https://github.com/kana/vim-textobj-function.git'
NeoBundle 'https://github.com/thinca/vim-textobj-comment.git'
NeoBundle 'https://github.com/kana/vim-textobj-indent.git'
NeoBundle 'scrooloose/nerdtree'

call neobundle#end()

filetype plugin indent on
NeoBundleCheck

set autoindent
set autoread
set backspace=indent,eol,start
"set cursorcolumn
"set cursorline
set expandtab
set foldmethod=marker
set hidden
set ignorecase
set incsearch
set matchtime=1
set nohlsearch
set noswapfile
set number
set pumheight=10
set ruler
set shiftwidth=4
set showmatch
set showmode
set tabstop=4
set textwidth=100
set ambiwidth=double
set virtualedit+=block
set wrap
set completeopt=menuone
syntax enable


"unite.vim
let g:unite_enable_start_insert=0
noremap <silent> <Space>uf :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " file"<CR>
noremap <silent> <Space>ut :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " -tab file"<CR>
noremap <silent> <Space>ub :Unite buffer<CR>
noremap <silent> <Space>tt :Unite tab<CR>
noremap <silent> <Space>up :Unite process<CR>
noremap <silent> <Space>um :Unite file_mru<CR>
noremap <silent> <Space>ur :Unite register<CR>
noremap <silent> <Space>uo :Unite outline<CR>
noremap <silent> <Space>ubd :Unite build<CR>
noremap <silent> <Space><Space> :UniteWithBufferDir
            \ -tab file<CR>
noremap <silent> <Space>un :Unite file/new<CR>
noremap <silent> <Space>uw :UniteWithBufferDir file<CR>
augroup unite
    autocmd!
    autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
augroup END

"Unite grep
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
endif
let g:unite_source_grep_max_candidates = 200
nnoremap <silent> <Space>ug :<C-u>Unite grep -buffer-name=search-buffer<CR>
nnoremap <silent> <Space>rg :<C-u>UniteResume search-buffer<CR>

"neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \'vimshell' : $HOME.'/.vimshell_hist',
    \'cpp' : $HOME.'/.cpp_hist',
    \'java' : $HOME.'/.java_hist',
    \'javascript' : $HOME.'/.js_hist',
    \'tex' : $HOME.'/.tex_hist',
    \'plaintex' : $HOME.'/.tex_hist'
\}

inoremap <expr><C-c> neocomplete#cancel_popup()
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-h> neocomplete#smart_close_popup() . '<C-h>'
inoremap <expr><BS>  neocomplete#smart_close_popup() . '<BS>'
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-l> neocomplete#complete_common_string()


"neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

"ToggleNumberOptions
if v:version >= 703
    nnoremap <silent> <Leader>n :call ToggleNumber()<CR>
    function ToggleNumber()
        if &number
            set relativenumber!
        endif
    endfunction
endif


"emmet-vim (for zen-coding)
let g:user_emmet_install_global = 0
augroup emmet
    autocmd!
    autocmd FileType html,css EmmetInstall
augroup END

"eskk.vim
set imdisable
let g:eskk#enable_completion = 1
imap <C-o> <Plug>(eskk:toggle)

let g:eskk#dictionary = {
            \ 'path': $HOME . '/.vim/skkdic/skk-jisyo',
            \ 'sorted': 0,
            \ 'encoding': 'utf-8'
            \}

if has('mac')
    let g:eskk#large_dictionary = {
                \ 'path': $HOME . '/.vim/skkdic/SKK-JISYO.L',
                \ 'sorted': 1,
                \ 'encoding': 'euc-jp'
                \}
elseif has('unix')
    let g:eskk#large_dictionary = {
                \ 'path': $HOME . '/.vim/skkdic/SKK-JISYO.utf.L',
                \ 'sorted': 1,
                \ 'encoding': 'utf-8'
                \}
endif

augroup eskk
    autocmd!
    autocmd User eskk-initialize-pre call s:eskk_initial_pre()
    function! s:eskk_initial_pre()
        let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
        call t.add_map(',', ',')
        call t.add_map('.', '.')
        call eskk#register_mode_table('hira', t)

        let t = eskk#table#new('rom_to_kata*', 'rom_to_kata')
        call t.add_map(',', ',')
        call t.add_map('.', '.')
        call eskk#register_mode_table('kata', t)
    endfunction
augroup END

"incsearch.vim
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"template settings
augroup template
    autocmd!
    autocmd BufNewFile *.html 0r $HOME/.vim/template/html.txt
    autocmd BufNewFile *.c 0r $HOME/.vim/template/c.txt
    autocmd BufNewFile *.cpp 0r $HOME/.vim/template/cpp.txt
    "autocmd BufNewFile *.tex 0r $HOME/.vim/template/report.tex
    autocmd BufNewFile *.tex 0r $HOME/.vim/template/slide.tex
    autocmd BufNewFile *.java 0r $HOME/.vim/template/java.txt
augroup END


if neobundle#tap('vim-trailing-whitespace')
    let g:extra_whitespace_ignored_filetypes = ['unite']
endif

nnoremap <C-l><C-i> :set list!<CR>
nnoremap <C-h><C-l> :set hlsearch!<CR>
nnoremap <C-p><C-p> :set paste!<CR>
set laststatus=2
nnoremap <Space>e :e ~/.vimrc<CR>
nnoremap <silent><Space>E :TagbarToggle<CR>
let g:tagbar_left=1
let g:tagbar_autofocus = 1

"lightline.vim
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'mode_map': { 'c': 'NORMAL'},
    \ 'active': {
    \   'left': [ ['mode', 'paste'],
    \           ['fugitive', 'gitgutter', 'filename', 'filetype', 'eskkmode'] ],
    \   'right': [ ['lineinfo'],
    \              ['percent'],
    \              ['fileformat', 'fileencoding'] ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'readonly': 'MyReadonly',
    \   'fugitive': 'MyFugitive',
    \   'filename': 'MyFilename',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'eskkmode': 'GetEskkMode',
    \   'gitgutter': 'MyGitGutter'
    \ }
    \ }

function! MyModified()
    return &ft =~? 'help\|vimfiler' ? '' : &modified ? '+' :
                \ &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !=? 'help\|vimfiler' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
    return ('' !=? MyReadonly() ? MyReadonly() . ' ' : '') .
                \ (&ft ==? 'vimfiler' ? vimfiler#get_status_string() :
                \ &ft ==? 'unite' ? unite#get_status_string() :
                \ &ft ==? 'vimshell' ? vimshell#get_status_string() :
                \ '' !=? expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' !=? MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    try
        if &ft !~? 'vimfiler' && exists('*fugitive#head')
            return fugitive#head()
        endif
    catch
    endtry
    return ''
endfunction

function MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
    return winwidth(0) > 70 ? lightline#mode() : ''
endfunction

function! GetEskkMode()
    return eskk#is_enabled() ? eskk#get_mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 70
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

set noshowmode
try
      set shortmess+=c
catch /^Vim\%((\a\+)\)\=:E539: Illegal character/
    autocmd MyAutoCmd VimEnter *
            \ highlight ModeMsg guifg=bg guibg=bg |
            \ highlight Question guifg=bg guibg=bg
endtry
let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0

imap jj <ESC>


function GetGitRoot() abort
    try
        let l:isgitrepo =
        \ matchstr(system('git rev-parse --is-inside-work-tree'), 'true')
        if l:isgitrepo ==? 'true'
            let l:gitroot = system('git rev-parse --show-toplevel')
            return substitute(l:gitroot, '\(\r\|\n\)\+', '', 'g')
        else
            return '.'
        endif
    catch
    endtry
endfunction

"tab
noremap <silent> tn gt<CR>
noremap <silent> tp gT<CR>

nnoremap <silent> <Space>gh :GitGutterLineHighlightsToggle<CR>

"let g:indent_guides_enable_on_vim_startup = 1

"flack8
nnoremap <silent> <Leader>c :call Flake8()<CR>

let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans = 1
colorscheme solarized
highlight clear SignColumn

if (exists('+colorcolumn'))
    set colorcolumn=80
    highlight ColorColumn ctermbg=0
endif

"tweetvim
nnoremap <silent> <Space>tl :TweetVimUserStream<CR>
nnoremap <silent> <Space>tp :TweetVimCommandSay<CR>
nnoremap <silent> <Space>tm :TweetVimMentions<CR>
nnoremap <silent> <Space>ta :Unite tweetvim/account<CR>

"operator
"map <Space>c <Plug>(operator-comment)
map <Space>u <Plug>(operator-uncomment)

"NERDtree
nnoremap <Space>f :NERDTreeToggle<CR>

augroup latex
    autocmd!
    autocmd FileType plaintex setlocal filetype=tex
augroup END

augroup md
    autocmd!
    autocmd Bufnewfile,Bufread *.md setlocal filetype=markdown
    autocmd BufNewFile,BufRead *.mkd setlocal filetype=markdown
augroup END

augroup python
    autocmd!
    autocmd FileType python setlocal completeopt-=preview
    autocmd FileType python setlocal omnifunc=jedi#completions
augroup END

augroup html
    autocmd!
    autocmd FileType html setlocal tabstop=2
    autocmd FileType html setlocal shiftwidth=2
augroup END

augroup golang
    autocmd!
    exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
    autocmd FileType go setlocal noexpandtab
    autocmd FileType go setlocal tabstop=4
    autocmd FileType go setlocal shiftwidth=4
    autocmd FileType go nmap <Space>gr <Plug>(go-run)
    autocmd FileType go nmap <Space>gb <Plug>(go-build)
    autocmd FileType go nmap <Space>gt <Plug>(go-test)
    autocmd FileType go nmap <Space>gc <Plug>(go-coverage)
    autocmd FileType go nmap <Space>gd <Plug>(go-doc)
    autocmd FileType go nmap <Space>gi <Plug>(go-import)
    autocmd FileType go nmap <Space>gm <Plug>(go-implements)
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_build_constraints = 1

    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
augroup END

augroup titlesettings
    autocmd!
    autocmd BufEnter * call system("tmux rename-window " . "'[vim] " . expand("%:t") . "'")
    autocmd VimLeave * call system("tmux rename-window zsh")
    autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
augroup END

let g:cheatsheets_filepath="$HOME/.cheatsheets/"
function! Cheat()
    let l:tmp = "sv " . g:cheatsheets_filepath . input("cheat:")
    exe l:tmp
endfunction
nnoremap <Space>c :call Cheat()<CR>

set fileencodings=utf-8,iso-2022-jp,cp932,sjis,euc-jp
