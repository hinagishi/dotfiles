" NeoBundle Setting
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
let g:neobundle#types#git#default_protocol = 'https'

" My Bundles here:
NeoBundle 'Shougo/vimproc.vim', {
\   'build': {
\       'mac': 'make -f make_mac.mak',
\       'linux': 'make -f make_unix.mak',
\   },
\}
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/unite-build.git'
NeoBundle 'Shougo/unite-outline.git'
NeoBundle 'kana/vim-textobj-user.git'
NeoBundle 'kana/vim-operator-user.git'
NeoBundle 'kana/vim-textobj-line.git'
NeoBundle 'kana/vim-textobj-function.git'
NeoBundle 'kana/vim-textobj-indent.git'
NeoBundle 'hinagishi/neosnippet-snippets.git'
NeoBundle 'hinagishi/wombat256.vim.git'
NeoBundle 'altercation/vim-colors-solarized.git'
NeoBundle 'ujihisa/neco-look.git'
NeoBundle 'majutsushi/tagbar.git'
NeoBundle 'haya14busa/incsearch.vim'
NeoBundle 'bronson/vim-trailing-whitespace.git'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'vim-scripts/gtags.vim.git'
NeoBundle 'fatih/vim-go.git'
NeoBundle 'emonkak/vim-operator-comment.git'
NeoBundle 'thinca/vim-textobj-comment.git'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'rust-lang/rust.vim'
NeoBundle 'rhysd/rust-doc.vim'
NeoBundle 'racer-rust/vim-racer'
NeoBundle 'kmnk/vim-unite-giti'

call neobundle#end()

filetype plugin indent on
NeoBundleCheck

set autoindent
set autoread
set backspace=indent,eol,start
set expandtab
set foldmethod=marker
set hidden
set ignorecase
set incsearch
set matchtime=1
set nohlsearch
set noswapfile
set number
set pumheight=10
set ruler
set shiftwidth=4
set showmatch
set showmode
set tabstop=4
set textwidth=100
set ambiwidth=double
set virtualedit+=block
set wrap
set completeopt=menuone
syntax enable


"unite.vim
let g:unite_enable_start_insert=1
noremap <silent> <Space>uf :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " file"<CR>
noremap <silent> <Space>ut :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " -tab file"<CR>
noremap <silent> <Space>ub :Unite buffer<CR>
noremap <silent> <Space>tt :Unite tab<CR>
noremap <silent> <Space>uo :Unite outline<CR>
noremap <silent> <Space>ubd :Unite build<CR>
noremap <silent> <Space><Space> :UniteWithBufferDir
            \ -tab file<CR>
noremap <silent> <Space>un :Unite file/new<CR>
noremap <silent> <Space>uw :UniteWithBufferDir file<CR>
noremap <silent> <Space>gb :Unite giti/branch<CR>
noremap <silent> <Space>gs :Unite giti/status<CR>
noremap <silent> <Space>gl :Unite giti/log<CR>
augroup unite
    autocmd!
    autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
augroup END

"Unite grep
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
endif
let g:unite_source_grep_max_candidates = 200
nnoremap <silent> <Space>ug :<C-u>Unite grep -buffer-name=search-buffer<CR>
nnoremap <silent> <Space>rg :<C-u>UniteResume search-buffer<CR>

"neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \'vimshell' : $HOME.'/.vimshell_hist',
    \'cpp' : $HOME.'/.cpp_hist',
    \'java' : $HOME.'/.java_hist',
    \'javascript' : $HOME.'/.js_hist',
    \'tex' : $HOME.'/.tex_hist',
    \'plaintex' : $HOME.'/.tex_hist'
\}

inoremap <expr><C-c> neocomplete#cancel_popup()
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-h> neocomplete#smart_close_popup() . '<C-h>'
inoremap <expr><BS>  neocomplete#smart_close_popup() . '<BS>'
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-l> neocomplete#complete_common_string()


"neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

"ToggleNumberOptions
if v:version >= 703
    nnoremap <silent> <Leader>n :call ToggleNumber()<CR>
    function ToggleNumber()
        if &number
            set relativenumber!
        endif
    endfunction
endif

"incsearch.vim
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

if neobundle#tap('vim-trailing-whitespace')
    let g:extra_whitespace_ignored_filetypes = ['unite']
endif

nnoremap <C-l><C-i> :set list!<CR>
nnoremap <C-h><C-l> :set hlsearch!<CR>
nnoremap <C-p><C-p> :set paste!<CR>
set laststatus=2
nnoremap <Space>e :e ~/.vimrc<CR>
nnoremap <silent><Space>E :TagbarToggle<CR>
let g:tagbar_left=0
let g:tagbar_autofocus = 1

"lightline.vim
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'mode_map': { 'c': 'NORMAL'},
    \ 'active': {
    \   'left': [ ['mode', 'paste'],
    \           ['fugitive', 'gitgutter', 'filename', 'filetype'] ],
    \   'right': [ ['lineinfo'],
    \              ['percent'],
    \              ['fileformat', 'fileencoding'] ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'readonly': 'MyReadonly',
    \   'fugitive': 'MyFugitive',
    \   'filename': 'MyFilename',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'gitgutter': 'MyGitGutter'
    \ },
      \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
      \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" }
    \ }

function! MyModified()
    return &ft =~? 'help\|vimfiler' ? '' : &modified ? '+' :
                \ &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !=? 'help\|vimfiler' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
    return ('' !=? MyReadonly() ? MyReadonly() . ' ' : '') .
                \ (&ft ==? 'vimfiler' ? vimfiler#get_status_string() :
                \ &ft ==? 'unite' ? unite#get_status_string() :
                \ &ft ==? 'vimshell' ? vimshell#get_status_string() :
                \ '' !=? expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' !=? MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    try
        if &ft !~? 'vimfiler' && exists('*fugitive#head')
            return fugitive#head()
        endif
    catch
    endtry
    return ''
endfunction

function MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
    return winwidth(0) > 70 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 70
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

imap jj <ESC>


function GetGitRoot() abort
    try
        let l:isgitrepo =
        \ matchstr(system('git rev-parse --is-inside-work-tree'), 'true')
        if l:isgitrepo ==? 'true'
            let l:gitroot = system('git rev-parse --show-toplevel')
            return substitute(l:gitroot, '\(\r\|\n\)\+', '', 'g')
        else
            return '.'
        endif
    catch
    endtry
endfunction

"tab
noremap <silent> tn gt<CR>
noremap <silent> tp gT<CR>

nnoremap <silent> <Space>gh :GitGutterLineHighlightsToggle<CR>

"let g:indent_guides_enable_on_vim_startup = 1

set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans = 1
colorscheme solarized
highlight clear SignColumn

if (exists('+colorcolumn'))
    set colorcolumn=80
    highlight ColorColumn ctermbg=0
endif

"operator
"map <Space>c <Plug>(operator-comment)
map <Space>u <Plug>(operator-uncomment)

"NERDtree
nnoremap <Space>f :NERDTreeToggle<CR>

augroup latex
    autocmd!
    autocmd FileType plaintex setlocal filetype=tex
augroup END

augroup md
    autocmd!
    autocmd Bufnewfile,Bufread *.md setlocal filetype=markdown
    autocmd BufNewFile,BufRead *.mkd setlocal filetype=markdown
augroup END

augroup python
    autocmd!
    autocmd FileType python setlocal completeopt-=preview
    autocmd FileType python setlocal omnifunc=jedi#completions
augroup END

augroup html
    autocmd!
    autocmd FileType html setlocal tabstop=2
    autocmd FileType html setlocal shiftwidth=2
augroup END

augroup golang
    autocmd!
    exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
    autocmd FileType go setlocal noexpandtab
    autocmd FileType go setlocal tabstop=4
    autocmd FileType go setlocal shiftwidth=4
    autocmd FileType go nmap <Space>gr <Plug>(go-run)
    autocmd FileType go nmap <Space>gb <Plug>(go-build)
    autocmd FileType go nmap <Space>gt <Plug>(go-test)
    autocmd FileType go nmap <Space>gc <Plug>(go-coverage)
    autocmd FileType go nmap <Space>gd <Plug>(go-doc)
    autocmd FileType go nmap <Space>gi <Plug>(go-import)
    autocmd FileType go nmap <Space>gm <Plug>(go-implements)
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_build_constraints = 1
augroup END

let g:rustfmt_autosave = 1
let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
set hidden
let g:racer_cmd = '$HOME/.cargo/bin/racer'
let $RUST_SRC_PATH="/usr/local/src/rustc-1.5.0/src"


augroup titlesettings
    autocmd!
    autocmd BufEnter * call system("tmux rename-window " . "'[vim] " . expand("%:t") . "'")
    autocmd VimLeave * call system("tmux rename-window zsh")
    autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
augroup END

augroup fzf
    set runtimepath+=~/repos/src/github.com/junegunn/fzf
augroup END

let g:cheatsheets_filepath="$HOME/.cheatsheets/"
function! Cheat()
    let l:tmp = "sv " . g:cheatsheets_filepath . input("cheat:")
    exe l:tmp
endfunction
nnoremap <Space>c :call Cheat()<CR>

set fileencodings=utf-8,iso-2022-jp,cp932,sjis,euc-jp
