" NeoBundle Setting
if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
let g:neobundle#types#git#default_protocol = 'https'

" My Bundles here:
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/vimshell.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'https://github.com/hinagishi/wombat256.vim.git'
NeoBundle 'https://github.com/altercation/vim-colors-solarized.git'
NeoBundle 'https://github.com/Shougo/unite-ssh.git'
"NeoBundle 'https://github.com/Shougo/vimfiler.git'
NeoBundle 'https://github.com/Shougo/unite-build.git'
NeoBundle 'https://github.com/ujihisa/neco-look.git'
NeoBundle 'https://github.com/mattn/emmet-vim'
NeoBundle 'https://github.com/tyru/eskk.vim.git'
NeoBundle 'https://github.com/majutsushi/tagbar.git'
NeoBundle 'https://github.com/Shougo/unite-outline.git'
NeoBundle 'haya14busa/incsearch.vim'
NeoBundle 'https://github.com/bronson/vim-trailing-whitespace.git'
NeoBundle 'https://github.com/w0ng/vim-hybrid.git'
NeoBundle 'itchyny/lightline.vim'
"NeoBundle 'marijnh/tern_for_vim', {
"\ 'build': {
"\   'others': 'npm install'
"\}}

call neobundle#end()

filetype plugin indent on
NeoBundleCheck

set autoindent
set autoread
set backspace=indent,eol,start
"set cursorcolumn
"set cursorline
set expandtab
set foldmethod=marker
set hidden
set ignorecase
set incsearch
set matchtime=1
set nohlsearch
set noswapfile
set number
set pumheight=10
set ruler
set shiftwidth=4
set showmatch
set showmode
set tabstop=4
set textwidth=100
set virtualedit+=block
set wrap
set completeopt=menuone
syntax enable

set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans = 1
colorscheme solarized

"unite.vim
let g:unite_enable_start_insert=0
noremap <silent> <Space>uf :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " file"<CR>
noremap <silent> <Space>ut :exe ":Unite -winheight=15 -path="
    \ . GetGitRoot() . " file -default-action=tabopen"<CR>
noremap <silent> <Space>ub :Unite buffer<CR>
noremap <silent> <Space>up :Unite process<CR>
noremap <silent> <Space>um :Unite file_mru<CR>
noremap <silent> <Space>ur :Unite register<CR>
noremap <silent> <Space>uo :Unite outline<CR>
noremap <silent> <Space>ubd :Unite build<CR>
noremap <silent> <Space><Space> :UniteWithBufferDir file
            \ -default-action=tabopen<CR>
noremap <silent> <Space>un :Unite file/new<CR>
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

"Unite grep
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
endif
let g:unite_source_grep_max_candidates = 200
nnoremap <silent> <Space>ug :<C-u>Unite grep -buffer-name=search-buffer<CR>
nnoremap <silent> <Space>rg :<C-u>UniteResume search-buffer<CR>

"neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \'vimshell' : $HOME.'/.vimshell_hist',
    \'cpp' : $HOME.'/.cpp_hist',
    \'java' : $HOME.'/.java_hist',
    \'javascript' : $HOME.'/.js_hist',
    \'tex' : $HOME.'/.tex_hist',
    \'plaintex' : $HOME.'/.tex_hist'
\}

inoremap <expr><C-c> neocomplete#cancel_popup()
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-h> neocomplete#smart_close_popup() . '<C-h>'
inoremap <expr><BS>  neocomplete#smart_close_popup() . '<BS>'
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-l> neocomplete#complete_common_string()

"neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

"supertab like snippets behavior
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

"ToggleNumberOptions
if version >= 703
    nnoremap <silent> <Leader>n :call ToggleNumber()<CR>
    function ToggleNumber()
        if &number
            set relativenumber!
        endif
    endfunction
endif


"emmet-vim (for zen-coding)
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

"eskk.vim
set imdisable
let g:eskk#enable_completion = 1
imap <C-r> <Plug>(eskk:toggle)

let g:eskk#dictionary = {
            \ 'path': $HOME . "/.vim/skkdic/skk-jisyo",
            \ 'sorted': 0,
            \ 'encoding': 'utf-8'
            \}

if has('mac')
    let g:eskk#large_dictionary = {
                \ 'path': $HOME . "/.vim/skkdic/SKK-JISYO.L",
                \ 'sorted': 1,
                \ 'encoding': 'euc-jp'
                \}
elseif has('unix')
    let g:eskk#large_dictionary = {
                \ 'path': $HOME . "/.vim/skkdic/SKK-JISYO.utf.L",
                \ 'sorted': 1,
                \ 'encoding': 'utf-8'
                \}
endif

autocmd User eskk-initialize-pre call s:eskk_initial_pre()
function! s:eskk_initial_pre()
    let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
    call t.add_map(',', ',')
    call t.add_map('.', '.')
    call eskk#register_mode_table('hira', t)

    let t = eskk#table#new('rom_to_kata*', 'rom_to_kata')
    call t.add_map(',', ',')
    call t.add_map('.', '.')
    call eskk#register_mode_table('kata', t)
endfunction

"incsearch.vim
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"template settings
autocmd BufNewFile *.html 0r $HOME/.vim/template/html.txt
autocmd BufNewFile *.c 0r $HOME/.vim/template/c.txt
autocmd BufNewFile *.cpp 0r $HOME/.vim/template/cpp.txt
"autocmd BufNewFile *.tex 0r $HOME/.vim/template/report.tex
autocmd BufNewFile *.tex 0r $HOME/.vim/template/slide.tex
autocmd BufNewFile *.java 0r $HOME/.vim/template/java.txt


if neobundle#tap('vim-trailing-whitespace')
    let g:extra_whitespace_ignored_filetypes = ['unite']
endif

nnoremap <C-l><C-i> :set list!<CR>
nnoremap <C-h><C-l> :set hlsearch!<CR>
nnoremap <C-p><C-p> :set paste!<CR>
set laststatus=2
nnoremap <Space>e :e ~/.vimrc<CR>
nnoremap <silent><Space>E :TagbarToggle<CR>


"lightline.vim
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'mode_map': { 'c': 'NORMAL'},
    \ 'active': {
    \   'left': [ ['mode', 'paste'],
    \           ['fugitive', 'filename', 'filetype', 'eskkmode'] ],
    \   'right': [ ['lineinfo'],
    \              ['percent'],
    \              ['fileformat', 'fileencoding'] ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'readonly': 'MyReadonly',
    \   'fugitive': 'MyFugitive',
    \   'filename': 'MyFilename',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'eskkmode': 'GetEskkMode'
    \ }
    \ }

function! MyModified()
    return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' :
                \ &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !~? 'help\|vimfiler' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \ &ft == 'unite' ? unite#get_status_string() :
                \ &ft == 'vimshell' ? vimshell#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    try
        if &ft !~? 'vimfiler' && exists('*fugitive#head')
            return fugitive#head()
        endif
    catch
    endtry
    return ''
endfunction

function MyFileformat()
    return winwidth(0) > 80 ? &fileformat : ''
endfunction

function! MyFiletype()
    return winwidth(0) > 80 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
    return winwidth(0) > 80 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
    return winwidth(0) > 70 ? lightline#mode() : ''
endfunction

function! GetEskkMode()
    return eskk#is_enabled() ? eskk#get_mode() : ''
endfunction

set noshowmode
let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0

imap jj <ESC>

if (exists('+colorcolumn'))
    set colorcolumn=80
    highlight ColorColumn ctermbg=0
endif

function GetGitRoot() abort
    try
        let l:isgitrepo =
        \ matchstr(system("git rev-parse --is-inside-work-tree"), "true")
        if l:isgitrepo == "true"
            let l:gitroot = system("git rev-parse --show-toplevel")
            return substitute(l:gitroot, '\(\r\|\n\)\+', "", "g")
        else
            return "."
        endif
    catch
    endtry
endfunction

"tab
noremap <silent> tt :tabnew<CR>
noremap <silent> tn gt<CR>
noremap <silent> tp gT<CR>

